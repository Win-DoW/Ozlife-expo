type User
  @model
{
  id: ID!
  email: String!
  nickname: String
  profile: String
  interest: String
  region: String
  image: String
  noti_token: String
  chat_noti_state: Int
  ozlife_noti_state: Int

  chatRoomUser: [ChatRoomUser] @hasMany(indexName: "byUser", fields: ["id"])
  reviewItem: [Review] @hasMany(indexName: "reviewByUser", fields: ["id"])
  storeItem: [Store] @hasMany(indexName: "storeByUser", fields: ["id"])
  ozlifeItem: [Ozlife] @hasMany(indexName: "ozlifeByUser", fields: ["id"])
  notiItem: [Notification] @hasMany(indexName: "notiByUser", fields: ["id"])
}

type Store
  @model
{
  id: ID!
  name: String!
  profile: String
  images: [String]
  tel: String
  address: String
  license: String
  url: String
  longitude: Float
  latitude: Float
  createdAt: String

  userID: ID! @index(name: "storeByUser", sortKeyFields: ["createdAt"])
  user: User @hasOne(fields: ["userID"])
  ozlifeItem: [Ozlife] @hasMany(indexName: "byStore", fields: ["id"])
}

type Ozlife
  @model
{
  id: ID!
  title: String
  profile: String
  images: [String]
  section: String
  tag: String
  question: [String!]
  member: Int
  visit_date: String
  name: String
  original_price: Int
  discount_price: Int
  promotion: String
  address: String
  createdAt: String

  storeID: ID! @index(name: "byStore")
  store: Store @hasOne(fields: ["storeID"])

  userID: ID! @index(name: "storeByUser", sortKeyFields: ["createdAt"]) @index(name: "ozlifeByUser", sortKeyFields: ["createdAt"])
  user: User @hasOne(fields: ["userID"])

  reviewItem: [Review] @hasMany(indexName: "byOzlife", fields: ["id"])
}

type Review
  @model
{
  id: ID!
  reviews: [String]
  status: Int
  createdAt: String

  ozlifeID: ID! @index(name: "byOzlife")
  ozlife: Ozlife @hasOne(fields: ["ozlifeID"])

  userID: ID! @index(name: "reviewByUser", sortKeyFields: ["createdAt"])
  user: User @hasOne(fields: ["userID"])
}

type ChatRoomUser
  @model
{
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["chatRoomID"])
  otherUserID: ID!
  chatRoomID: ID! @index(name: "byChatRoom", sortKeyFields: ["userID"])
  user: User @hasOne(fields: ["userID"])
  chatRoom: ChatRoom @hasOne(fields: ["chatRoomID"])
}

type ChatRoom
  @model
{
  id: ID!
  chatRoomUsers: [ChatRoomUser]
    @hasMany(indexName: "byChatRoom", fields: ["id"])
  messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  lastMessageID: ID!
  lastMessage: Message @hasOne(fields: ["lastMessageID"])
  messagesCount: Int!
}

type Message
  @model
  
{
  id: ID!
  createdAt: String!
  content: String!
  userID: ID!
  chatRoomID: ID! @index(name: "byChatRoom", sortKeyFields: ["createdAt"], queryField: "messagesByChatRoom")
  user: User @hasOne(fields: ["userID"])
  chatRoom: ChatRoom @hasOne(fields: ["chatRoomID"])
}

type Notification
  @model
{
  id: ID!
  userID: ID! @index(name: "notiByUser", sortKeyFields: ["createdAt"], queryField: "notificationByUser")
  title: String
  content: String
  image: String
  createdAt: String!
}

